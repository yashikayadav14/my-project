This project provides a complete understanding of how the frontend and backend parts of a web application communicate and work together. The backend, built using **Express.js**, serves as the server-side component that processes requests and sends responses. It is responsible for handling HTTP methods such as GET, POST, PUT, and DELETE. In this case, the Express server defines a GET API endpoint (`/api/products`) that returns a static list of products in JSON format. The use of **CORS (Cross-Origin Resource Sharing)** middleware ensures that the backend can safely interact with a frontend running on a different origin (for example, React on port 3000 and Express on port 5000). This makes it possible for the two parts of the application to exchange data without encountering security restrictions.

The **frontend** is developed using **React**, which allows the creation of dynamic and interactive user interfaces through reusable components. React uses a virtual DOM to efficiently update only the parts of the page that change, ensuring fast and smooth rendering. In this project, the main React component uses the **useEffect** hook to perform an API call as soon as the component loads, and the **useState** hook to manage and store the data fetched from the backend.

To handle communication between the frontend and backend, **Axios** is used. Axios is a promise-based HTTP client that simplifies the process of sending asynchronous requests and receiving responses. It allows the React app to request product data from the Express API and update the user interface when the data is received. If the data takes time to load, a loading message is displayed, and if there is an error, it is handled gracefully using state management.

The fetched data is then displayed dynamically on the webpage using **React’s JSX syntax**, which allows HTML and JavaScript to be combined seamlessly. The products are rendered inside styled components, each showing the product name, price, and a “Buy Now” button. The frontend styling, written in CSS, provides a modern dark theme with hover effects and interactive buttons for a visually appealing layout.

Overall, this project demonstrates how a **full-stack application** works — starting from data creation on the server, transferring it securely through an API, and rendering it dynamically on the client side. It helps understand key web development concepts like RESTful APIs, asynchronous programming, frontend-backend integration, and user interface design.
